import os
import google.generativeai as genai
from typing import List, Dict, Optional

GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-flash")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# ===== –û–±—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ =====


def _call_gemini(prompt: str, system_hint: str) -> str:
    if not GEMINI_API_KEY:
        return ""
    try:
        model = genai.GenerativeModel(
            GEMINI_MODEL, system_instruction=system_hint)
        resp = model.generate_content(prompt)
        return (getattr(resp, "text", "") or "").strip()
    except Exception as e:
        print("[Gemini ERROR]", e)
        return ""

# ===== –ì–µ—Ä–æ–π-–ø–æ—Å—Ç (–∫–∞–∫ –±—ã–ª–æ) =====


def generate_hero_post(hero: str) -> str:
    system = (
        "–¢—ã ‚Äî —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ –ø–æ MLBB. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ –ø–æ—Å—Ç—ã."
    )
    prompt = f"""
–ì–µ—Ä–æ–π: {hero}
–ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –æ –ø—Ä–∏—ë–º–µ, —Ç—Ä—é–∫–µ –∏–ª–∏ –ø–æ–ª–µ–∑–Ω–æ–º —Å–æ–≤–µ—Ç–µ —Å —ç—Ç–∏–º –≥–µ—Ä–æ–µ–º –≤ Mobile Legends.
–°—Ç–∏–ª—å: –∂–∏–≤–æ–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ö—ç—à—Ç–µ–≥–∏. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö —É–º–µ–Ω–∏–π.
"""
    text = _call_gemini(prompt, system)
    if not text:
        text = f"–ï—Å—Ç—å –∫—Ä—É—Ç–æ–π –ø—Ä–∏—ë–º —Å –≥–µ—Ä–æ–µ–º {hero}! –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –Ω–∏–∂–µ üëá"
    return text

# ===== Counter-pick Q&A =====


def generate_counter_pick(enemy: str, lane: Optional[str] = None, role: Optional[str] = None) -> str:
    system = "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ MLBB. –î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –∫–æ–Ω—Ç—Ä-–ø–∏–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    prompt = f"""
–í–æ–ø—Ä–æ—Å: –∫–∞–∫ –∫–æ–Ω—Ç—Ä–∏—Ç—å –≥–µ—Ä–æ—è {enemy} –≤ MLBB?
–£–∫–∞–∂–∏ 3‚Äì6 –∫–æ–Ω—Ç—Ä-–ø–∏–∫–æ–≤ (–≥–µ—Ä–æ–∏), –ø–æ 1‚Äì2 –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–µ–≥–æ –∏ 1‚Äì2 –ø—Ä–µ–¥–º–µ—Ç–∞/—ç–º–±–ª–µ–º—ã/–±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã.
{f"–õ–∏–Ω–∏—è/–ø–æ–∑–∏—Ü–∏—è: {lane}" if lane else ""}
{f"–†–æ–ª—å: {role}" if role else ""}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –∫–æ—Ä–æ—Ç–∫–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (‚Äî ...). –ë–µ–∑ —Ö—ç—à—Ç–µ–≥–æ–≤. –ë–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö —É–º–µ–Ω–∏–π.
"""
    text = _call_gemini(prompt, system)
    if not text:
        text = f"–ü—Ä–æ—Ç–∏–≤ {enemy} —Å—Ç–∞—Ä–∞–π—Å—è –ø–∏–∫–∞—Ç—å –≥–µ—Ä–æ–µ–≤ —Å –∂—ë—Å—Ç–∫–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–π –≤–∞–∂–Ω—ã–µ —É–º–µ–Ω–∏—è –Ω–∞ –µ—ë –≤—Ö–æ–¥. –ê–Ω—Ç–∏-—Ö–∏–ª–ª –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ ‚Äî –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
    return text

# ===== Tier List =====


def generate_tier_list(role: Optional[str] = None, lane: Optional[str] = None, skill: Optional[str] = None, note: Optional[str] = None) -> Dict:
    system = "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ MLBB. –§–æ—Ä–º–∏—Ä—É–µ—à—å tier list –≤ JSON –¥–ª—è Telegram Mini App."
    prompt = f"""
–°—Ñ–æ—Ä–º–∏—Ä—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π tier list –ø–æ MLBB –≤ JSON —Å –∫–ª—é—á–∞–º–∏: "S", "A", "B" (–º–∞—Å—Å–∏–≤—ã –∏–º—ë–Ω –≥–µ—Ä–æ–µ–≤) –∏ "notes" (—Å—Ç—Ä–æ–∫–∞).
{f"–†–æ–ª—å/–∫–ª–∞—Å—Å: {role}" if role else ""}
{f"–õ–∏–Ω–∏—è: {lane}" if lane else ""}
{f"–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã: {skill}" if skill else ""}
{f"–ö–æ–Ω—Ç–µ–∫—Å—Ç/–∑–∞–º–µ—Ç–∫–∏: {note}" if note else ""}

–í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –≤—Ä–æ–¥–µ:
{{"S":["...","..."],"A":["..."],"B":["..."],"notes":"..."}}
"""
    raw = _call_gemini(prompt, system)
    import json
    try:
        data = json.loads(raw)
        # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        for k in ["S", "A", "B"]:
            data.setdefault(k, [])
        data.setdefault("notes", "")
        return data
    except Exception:
        # fallback: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return {"S": [], "A": [], "B": [], "notes": raw or "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON."}

# ===== Quiz =====


def generate_quiz(topic: Optional[str] = None, difficulty: str = "easy") -> Dict:
    system = "–¢—ã ‚Äî —Ç—Ä–µ–Ω–µ—Ä MLBB. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (multiple choice) –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
    prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ MLBB –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
–¢–µ–º–∞: {topic or "–æ–±—â–∏–µ –º–µ—Ö–∞–Ω–∏–∫–∏, –≥–µ—Ä–æ–∏, –ø—Ä–µ–¥–º–µ—Ç—ã"}.
–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ JSON:
{{
  "question": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞?",
  "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1","–í–∞—Ä–∏–∞–Ω—Ç 2","–í–∞—Ä–∏–∞–Ω—Ç 3","–í–∞—Ä–∏–∞–Ω—Ç 4"],
  "correct_index": 0,
  "explanation": "–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π."
}}
–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ JSON.
"""
    raw = _call_gemini(prompt, system)
    import json
    try:
        data = json.loads(raw)
        # –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not isinstance(data.get("options"), list) or len(data["options"]) != 4:
            raise ValueError("need 4 options")
        return data
    except Exception:
        # fallback
        return {
            "question": "–ß—Ç–æ –¥–∞—ë—Ç –ø—Ä–µ–¥–º–µ—Ç 'Necklace of Durance'?",
            "options": ["–ê–Ω—Ç–∏-—Ö–∏–ª–ª", "–©–∏—Ç", "–°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏", "–í–∞–º–ø–∏—Ä–∏–∑–º"],
            "correct_index": 0,
            "explanation": "–ü—Ä–µ–¥–º–µ—Ç —Å–Ω–∏–∂–∞–µ—Ç –ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (anti-heal).",
        }

# ===== Daily Challenge =====


def generate_daily_challenge() -> str:
    system = "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä MLBB. –ü—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å —á–µ–ª–ª–µ–Ω–¥–∂–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤."
    prompt = """
–ü—Ä–∏–¥—É–º–∞–π –æ–¥–∏–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è MLBB –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
–§–æ—Ä–º–∞—Ç: 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å, –±–µ–∑ —Ö—ç—à—Ç–µ–≥–æ–≤.
–ü—Ä–∏–º–µ—Ä—ã: "–í—ã–∏–≥—Ä–∞–π –º–∞—Ç—á, –∫—É–ø–∏–≤ —Ö–æ—Ç—è –±—ã 3 –∑–∞—â–∏—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞"; "–°—ã–≥—Ä–∞–π –±–µ–∑ Recall"; "–°–¥–µ–ª–∞–π 3 —É—Å–ø–µ—à–Ω—ã—Ö –≥–∞–Ω–∫–∞ –¥–æ 7 –º–∏–Ω—É—Ç—ã".
"""
    text = _call_gemini(prompt, system)
    return text or "–í—ã–∏–≥—Ä–∞–π –º–∞—Ç—á, –Ω–µ —É–º–∏—Ä–∞—è –±–æ–ª–µ–µ 2 —Ä–∞–∑!"

# ===== Patch Explainer =====


def explain_patch(notes_text: str) -> str:
    system = "–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–∞—Ç—á–Ω–æ—É—Ç–æ–≤ MLBB. –û–±—ä—è—Å–Ω—è–µ—à—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º."
    prompt = f"""
–í–æ—Ç —Ç–µ–∫—Å—Ç –ø–∞—Ç—á–Ω–æ—É—Ç–æ–≤ (–º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω—ã –∏–ª–∏ —Å—ã—Ä—ã–º–∏):

{notes_text}

–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ –ø—É–Ω–∫—Ç–∞–º: –∫—Ç–æ —É—Å–∏–ª–µ–Ω/–æ—Å–ª–∞–±–ª–µ–Ω, –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤/—ç–º–±–ª–µ–º, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –º–µ—Ç—ã. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Å–ø–∏—Å–∫–æ–º –∏–∑ 5‚Äì10 –ø—É–Ω–∫—Ç–æ–≤.
"""
    text = _call_gemini(prompt, system)
    return text or "–ù–µ—Ç —è–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π."
